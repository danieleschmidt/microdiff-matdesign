name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"

jobs:
  # Pre-flight checks
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      python-matrix: ${{ steps.setup.outputs.python-matrix }}
      test-suites: ${{ steps.setup.outputs.test-suites }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup job matrix
      id: setup
      run: |
        echo "python-matrix=[\"3.8\", \"3.9\", \"3.10\", \"3.11\"]" >> $GITHUB_OUTPUT
        echo "test-suites=[\"unit\", \"integration\", \"e2e\"]" >> $GITHUB_OUTPUT

    - name: Check for secrets
      run: |
        if git log --format=%B -n 1 | grep -i "secret\|password\|key\|token"; then
          echo "❌ Potential secrets detected in commit message"
          exit 1
        fi

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-flight
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Code formatting check
      run: |
        black --check --diff microdiff_matdesign tests
        isort --check-only --diff microdiff_matdesign tests

    - name: Lint with ruff
      run: ruff check microdiff_matdesign tests

    - name: Type checking
      run: mypy microdiff_matdesign

    - name: Documentation check
      run: interrogate -vv microdiff_matdesign

    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME\|XXX" microdiff_matdesign/ --exclude-dir=__pycache__; then
          echo "⚠️ Found TODO/FIXME comments - please address before merging"
          exit 1
        fi

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: pre-flight
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Bandit security linter
      run: |
        bandit -r microdiff_matdesign -f json -o bandit-report.json
        bandit -r microdiff_matdesign

    - name: Safety check for known vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Semgrep static analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/django

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit tests with matrix
  test-unit:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pre-flight, code-quality]
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.pre-flight.outputs.python-matrix) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=microdiff_matdesign \
          --cov-report=xml \
          --cov-report=term \
          --junit-xml=pytest-unit.xml \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: python-${{ matrix.python-version }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: pytest-unit.xml

  # Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [pre-flight, code-quality]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: microdiff_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run database migrations
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/microdiff_test
      run: |
        python -c "import os; print('DATABASE_URL:', os.environ.get('DATABASE_URL', 'Not set'))"

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/microdiff_test
      run: |
        pytest tests/integration/ \
          --cov=microdiff_matdesign \
          --cov-append \
          --cov-report=xml \
          --junit-xml=pytest-integration.xml \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration-tests

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: pytest-integration.xml

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [pre-flight, code-quality]
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run benchmarks
      run: |
        pytest tests/benchmarks/ \
          --benchmark-json=benchmark-results.json \
          --benchmark-only

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: false
        comment-on-alert: true
        summary-always: true

  # Build and test Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pre-flight, code-quality]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: microdiff-matdesign:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm microdiff-matdesign:test python -c "
        import microdiff_matdesign
        print('✅ Package imports successfully')
        print('Version:', microdiff_matdesign.__version__)
        "

    - name: Scan image for vulnerabilities
      uses: anchore/scan-action@v3
      with:
        image: microdiff-matdesign:test
        fail-build: false
        severity-cutoff: critical

  # Documentation tests
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-flight
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Test documentation links
      run: |
        cd docs
        make linkcheck

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # License and dependency checks
  compliance:
    name: License & Dependency Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: pre-flight
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-licenses

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --fail-on="GPL"

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: .
        format: spdx-json

    - name: Upload compliance reports
      uses: actions/upload-artifact@v3
      with:
        name: compliance-reports
        path: |
          licenses.json
          *.spdx.json

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security, test-unit, test-integration, build-docker, docs, compliance]
    if: always()
    steps:
    - name: Check all jobs status
      if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: |
        echo "❌ One or more CI jobs failed"
        exit 1

    - name: Success message
      run: |
        echo "✅ All CI checks passed successfully!"

    - name: Update status badge
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🎉 Main branch CI completed successfully"

# Workflow notifications
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [ci-success]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Notify Slack on success
      if: needs.ci-success.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ CI passed for main branch"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: needs.ci-success.result != 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CI failed for main branch"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}