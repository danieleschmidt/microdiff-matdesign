# SLSA Level 3 Provenance Generation Workflow
# Generates cryptographically signed build provenance for supply chain security

name: SLSA Provenance Generation

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and generate provenance
  provenance:
    permissions:
      actions: read
      id-token: write
      contents: write
      packages: write
      attestations: write
    
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      provenance-name: ${{ steps.gen.outputs.provenance-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
      
      - name: Generate SLSA Build Provenance
        id: gen
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          digest: ${{ steps.build.outputs.digest }}
          registry-username: ${{ github.actor }}
        secrets:
          registry-password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Sign SBOM with Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.2'
      
      - name: Upload SBOM attestation
        run: |
          cosign attest --yes --predicate sbom.spdx.json \
            --type spdxjson \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Verify attestations
        run: |
          cosign verify-attestation --type slsaprovenance \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          
          cosign verify-attestation --type spdxjson \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-attestations
          path: |
            sbom.spdx.json
            ${{ steps.gen.outputs.provenance-name }}
  
  # Security scanning of built image
  security-scan:
    needs: provenance
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.provenance.outputs.image-digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.provenance.outputs.image-digest }}
          format: sarif
          output-file: grype-results.sarif
      
      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: grype-results.sarif
  
  # Deployment with attestation verification
  deploy-staging:
    needs: [provenance, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.2'
      
      - name: Verify image provenance
        run: |
          cosign verify-attestation --type slsaprovenance \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.provenance.outputs.image-digest }}
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Deploy to staging
        run: |
          echo "Deploying verified image to staging environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.provenance.outputs.image-digest }}"
          # Add your deployment commands here
  
  # Production deployment (manual approval required)
  deploy-production:
    needs: [provenance, security-scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.2'
      
      - name: Verify image provenance
        run: |
          cosign verify-attestation --type slsaprovenance \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.provenance.outputs.image-digest }}
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Deploy to production
        run: |
          echo "Deploying verified image to production environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.provenance.outputs.image-digest }}"
          # Add your production deployment commands here
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'SLSA L3 verified deployment',
              auto_merge: false
            });
